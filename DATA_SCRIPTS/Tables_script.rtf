{\rtf1\ansi\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Courier New;}{\f1\fnil\fcharset238 Courier New;}{\f2\fnil Courier New;}}
{\*\generator Riched20 10.0.22621}\viewkind4\uc1 
\pard\f0\fs22\lang1033 CREATE SEQUENCE employee_id_seq\par
  START WITH 1\par
  INCREMENT BY 1\par
  MAXVALUE 10000\par
  NOCYCLE;\par
/\par
CREATE TABLE employees (\par
    id_employee     NUMBER DEFAULT employee_id_seq.NEXTVAL CONSTRAINT employee_pk PRIMARY KEY ,\par
    first_name      VARCHAR2(30) NOT NULL,\par
    last_name       VARCHAR2(50) NOT NULL,\par
    driving_licence VARCHAR2(1) CHECK (driving_licence IN ('Y','y','N','n')) ,\par
    hire_date       DATE DEFAULT SYSDATE,\par
    hour_wage       NUMBER\par
);\par
/\par
CREATE SEQUENCE principals_id_seq\par
  START WITH 1\par
  INCREMENT BY 1\par
  MAXVALUE 10000\par
  NOCYCLE;\par
/\par
CREATE TABLE principals (\par
    id_principal  NUMBER DEFAULT principals_id_seq.NEXTVAL CONSTRAINT principals_pk PRIMARY KEY ,\par
    first_name    VARCHAR2(30) NOT NULL,\par
    last_name     VARCHAR2(50) NOT NULL,\par
    city          VARCHAR2(100),\par
    street        VARCHAR2(100),\par
    home_number   VARCHAR2(10),\par
    phone_number  NUMBER\par
);\par
/\par
CREATE SEQUENCE jobs_id_seq\par
  START WITH 1\par
  INCREMENT BY 1\par
  MAXVALUE 100000\par
  NOCYCLE;\par
/\par
CREATE TABLE jobs \par
   (id_job NUMBER DEFAULT jobs_id_seq.NEXTVAL CONSTRAINT jobs_pk PRIMARY KEY , \par
\tab id_principal NUMBER CONSTRAINT jobs_id_principal_fk REFERENCES principals(id_principal), \par
    street VARCHAR2(50),\par
\tab agreed_amount NUMBER, \par
\tab predicted_beginning DATE, \par
\tab predicted_ending DATE ,\par
\tab job_begin DATE, \par
\tab job_end DATE,\par
    job_description VARCHAR2(1000),\par
    status VARCHAR2(30) DEFAULT 'Nie rozpocz\f1\'eata'\par
    );\par
    /\par
CREATE TABLE additional_works \par
   (id_additional_work NUMBER GENERATED ALWAYS AS IDENTITY CONSTRAINT additional_works_pk PRIMARY KEY, \par
\tab id_job NUMBER NOT NULL ENABLE CONSTRAINT additional_works_id_job_fk REFERENCES jobs(id_job), \par
\tab work_describe VARCHAR2(1000 BYTE), \par
\tab price NUMBER,\par
    day_of_finish DATE DEFAULT SYSDATE\par
    );\par
/\par
 CREATE TABLE daily_costs \par
   (id_daily_cost NUMBER GENERATED ALWAYS AS IDENTITY CONSTRAINT daily_costs_pk PRIMARY KEY, \par
\tab id_job NUMBER CONSTRAINT daily_costs_id_job_fk REFERENCES jobs(id_job) ON DELETE CASCADE,  \par
\tab amount_of_kilometers NUMBER, \par
\tab unpredicted_costs NUMBER, \par
\tab unpredicted_costs_details VARCHAR2(1000 BYTE), \par
\tab daily_cost_date DATE\par
    );\par
/\par
 CREATE TABLE worked_hours \par
   (id_worked_hours NUMBER GENERATED ALWAYS AS IDENTITY CONSTRAINT worked_hours_pk PRIMARY KEY, \par
\tab day_of_work DATE DEFAULT SYSDATE NOT NULL, \par
\tab hours_per_day NUMBER DEFAULT 8, \par
\tab id_job NUMBER CONSTRAINT worked_hours_id_job_fk REFERENCES jobs(id_job) ON DELETE CASCADE, \par
\tab id_employee NUMBER CONSTRAINT worked_hours_id_employee_fk REFERENCES employees(id_employee) ON DELETE CASCADE\par
    );\par
/\par
CREATE SEQUENCE invoice_id_seq\par
  START WITH 1\par
  INCREMENT BY 1\par
  MAXVALUE 10000\par
  NOCYCLE;\par
/\par
CREATE TABLE invoices\par
    (id_invoice NUMBER DEFAULT invoice_id_seq.NEXTVAL CONSTRAINT invoices_pk PRIMARY KEY,\par
     invoice_number VARCHAR2 (30),\par
     id_job NUMBER CONSTRAINT invoices_id_job_fk REFERENCES jobs(id_job) ON DELETE CASCADE,\par
     id_principal NUMBER CONSTRAINT invoices_id_principal_fk REFERENCES principals(id_principal) ON DELETE CASCADE,\par
     agreed_amount NUMBER,\par
     additional_works_amount NUMBER,\par
     date_of_issue DATE DEFAULT SYSDATE,\par
     payment_maturity DATE DEFAULT SYSDATE + 60,\par
     status VARCHAR2(30) DEFAULT 'Oczekiwanie na zap\'b3at\'ea\f2\u733?'\par
     );\par
/\par
CREATE TABLE done_jobs \par
   (id_done_job NUMBER  CONSTRAINT done_jobs_pk PRIMARY KEY , \par
\tab id_principal NUMBER CONSTRAINT done_jobs_id_principal_fk REFERENCES principals(id_principal) ON DELETE SET NULL, \par
\tab agreed_amount NUMBER, \par
\tab predicted_beginning DATE, \par
\tab predicted_ending DATE ,\par
\tab job_begin DATE, \par
\tab job_end DATE,\par
    job_description VARCHAR2(1000),\par
    status VARCHAR2(30)\par
    );\par
/\par
CREATE SEQUENCE materials_id_seq\par
  START WITH 1\par
  INCREMENT BY 1\par
  MAXVALUE 10000\par
  NOCYCLE;\par
/\par
CREATE TABLE used_materials\par
    (id_used_material NUMBER DEFAULT materials_id_seq.NEXTVAL CONSTRAINT used_materials_pk PRIMARY KEY,\par
     id_job NUMBER CONSTRAINT materials_id_jobs_fk REFERENCES jobs(id_job),\par
     id_material VARCHAR2(100),\par
     material_price NUMBER, \par
     material_amount VARCHAR2(500)\par
     );\par
/\par
CREATE TABLE materials\par
    (id_material NUMBER CONSTRAINT materials_pk PRIMARY KEY,\par
     material_name VARCHAR2(100),\par
     material_measure VARCHAR2(10) CHECK (material_measure IN ('szt','SZT','M2','m2','T','t'))\par
     );\par
/\par
CREATE TABLE jobs_done_statistics\par
    (id_job_done_statistic NUMBER GENERATED ALWAYS AS IDENTITY CONSTRAINT jobs_done_statistics PRIMARY KEY,\par
     principal_first_name VARCHAR2 (30),\par
     principal_last_name VARCHAR2 (40),\par
     street VARCHAR2 (30),\par
     worked_hours NUMBER,\par
     cost_of_worked_hours NUMBER,\par
     material_cost NUMBER,\par
     number_of_additional_works NUMBER,\par
     cost_of_additional_works NUMBER,\par
     driven_kilometers NUMBER,\par
     agreed_amount NUMBER,\par
     amount_of_unpredicted_costs NUMBER,\par
     predicted_time_in_days NUMBER,\par
     final_time_in_days NUMBER\par
     );\par
/\par
CREATE TABLE errors_details\par
    (id_error NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\par
     occur_time TIMESTAMP DEFAULT SYSTIMESTAMP,\par
     error_number VARCHAR2(30),\par
     error_message VARCHAR2 (300),\par
     error_details VARCHAR2 (500),\par
     user_name VARCHAR2(30)\par
     );\par
     \par
     \par
INSERT INTO employees (id_employee, first_name, last_name, driving_licence, hire_date, hour_wage) VALUES (employee_id_seq.nextval,'Jakub', 'Ku\f1\'9cmi\'f1ski','N', DATE'23-10-01',25);\par
INSERT INTO employees (id_employee, first_name, last_name, driving_licence, hire_date, hour_wage) VALUES (employee_id_seq.nextval,'Micha\'b3', 'Kowalczyk','N', DATE'22-10-01',30);\par
INSERT INTO employees (id_employee, first_name, last_name, driving_licence, hire_date, hour_wage) VALUES (employee_id_seq.nextval,'Zofia', 'Adak','N', DATE'21-10-01',30);\par
INSERT INTO employees (id_employee, first_name, last_name, driving_licence, hire_date, hour_wage) VALUES (employee_id_seq.nextval,'Kornel', 'Brzezi\'f1ski','N', DATE'20-10-01',35);\par
INSERT INTO employees (id_employee, first_name, last_name, driving_licence, hire_date, hour_wage) VALUES (employee_id_seq.nextval,'Jerzy', 'Zdu\'f1ski','Y', DATE'23-01-01',20);\par
INSERT INTO employees (id_employee, first_name, last_name, driving_licence, hire_date, hour_wage) VALUES (employee_id_seq.nextval,'Dominik', 'Twaim','N', DATE'22-06-01',20);\par
INSERT INTO employees (id_employee, first_name, last_name, driving_licence, hire_date, hour_wage) VALUES (employee_id_seq.nextval,'Micha\'b3', 'Opozda','Y', DATE'23-02-01',33);\par
INSERT INTO employees (id_employee, first_name, last_name, driving_licence, hire_date, hour_wage) VALUES (employee_id_seq.nextval,'Marek', 'Ele\'f1ski','N', DATE'20-12-01',31);\par
INSERT INTO employees (id_employee, first_name, last_name, driving_licence, hire_date, hour_wage) VALUES (employee_id_seq.nextval,'Robert', 'Nadaremno','N', DATE'23-12-01',40);\par
INSERT INTO employees (id_employee, first_name, last_name, driving_licence, hire_date, hour_wage) VALUES (employee_id_seq.nextval,'Szczepan', 'Bocian','Y', DATE'21-09-01',50);\par
  \par
INSERT INTO principals (id_principal, first_name, last_name, city, street, home_number, phone_number) VALUES (principals_id_seq.NEXTVAL, 'Konstanty', 'Tyszkiewisz', 'Warszawa', 'Woronicza', 123, 123123123);\par
INSERT INTO principals (id_principal, first_name, last_name, city, street, home_number, phone_number) VALUES (principals_id_seq.NEXTVAL, 'Jaros\'b3aw', 'Wachad\'b3o', 'Pruszk\f0\'f3w', 'Sienkiewicza', 1743, 99913132);\par
INSERT INTO principals (id_principal, first_name, last_name, city, street, home_number, phone_number) VALUES (principals_id_seq.NEXTVAL, 'Lech', 'Mikrus', 'O\f1\'bfary', 'Le\'9cna', 1, 51230232);\par
INSERT INTO principals (id_principal, first_name, last_name, city, street, home_number, phone_number) VALUES (principals_id_seq.NEXTVAL, 'Arkadiusz', 'Ziobro', 'Mi\'f1sk Mazowiecki', 'Sosnowa', 123, 34123222);\par
INSERT INTO principals (id_principal, first_name, last_name, city, street, home_number, phone_number) VALUES (principals_id_seq.NEXTVAL, 'Remigiusz', 'Elwi\'f1ska', 'Toru\'f1', 'Ma\'b3a', '1123A', 513140222);\par
INSERT INTO principals (id_principal, first_name, last_name, city, street, home_number, phone_number) VALUES (principals_id_seq.NEXTVAL, 'Ilona', 'Asymilewisz', 'Warszawa', 'Kr\f0\'f3tka', '43B', 514310381);\par
INSERT INTO principals (id_principal, first_name, last_name, city, street, home_number, phone_number) VALUES (principals_id_seq.NEXTVAL, 'Weronika', 'Toru\f1\'f1ska', 'Siennica', 'D\'b3uga', '12/12', 123444122);\par
\par
INSERT INTO jobs (id_job, id_principal, street, agreed_amount, predicted_beginning, predicted_ending, job_description) VALUES (jobs_id_seq.NEXTVAL, 1, '\'a3opusza\'f1ska', 25000, DATE'23-10-01',DATE'23-11-10','Ogr\f0\'f3d o powierzchni 300m2, nic skomplikowanego, \f1\'b3atwy dojazd');\par
INSERT INTO jobs (id_job, id_principal, street, agreed_amount, predicted_beginning, predicted_ending, job_description) VALUES (jobs_id_seq.NEXTVAL, 2, 'Jagielo\'f1ska', 15000, DATE'23-11-10',DATE'23-11-30','Trawnik wraz z licznymi klombami');\par
INSERT INTO jobs (id_job, id_principal, street, agreed_amount, predicted_beginning, predicted_ending, job_description) VALUES (jobs_id_seq.NEXTVAL, 3, 'Jagielo\'f1ska',5000, DATE'24-01-02',DATE'24-01-15','Niwelacja tereniu i nawo\'bfenie ziemi');\par
INSERT INTO jobs (id_job, id_principal, street, agreed_amount, predicted_beginning, predicted_ending, job_description) VALUES (jobs_id_seq.NEXTVAL, 1, 'Traugutta', 27000, DATE'24-01-16',DATE'24-02-02','Droga z kostki prowadz\'b9ca do altany');\par
INSERT INTO jobs (id_job, id_principal, street, agreed_amount, predicted_beginning, predicted_ending, job_description) VALUES (jobs_id_seq.NEXTVAL, 4, 'Misiewicza', 30000, DATE'23-02-03',DATE'23-02-27','Wiosenna piel\'eagnacja ogromnego ogrodu');\par
\par
INSERT INTO invoices (id_invoice, invoice_number, id_job, id_principal, agreed_amount, additional_works_amount, date_of_issue, payment_maturity)\par
        VALUES ( invoice_id_seq.NEXTVAL, '1/30/01/2020', 1, 1, 2300, 300, DATE'20-01-30',DATE'20-01-30'+ 60);\par
INSERT INTO invoices (id_invoice, invoice_number, id_job, id_principal, agreed_amount, additional_works_amount, date_of_issue, payment_maturity, status)\par
        VALUES ( invoice_id_seq.NEXTVAL, '1/10/02/2020', 2, 2, 20300, 4300, DATE'20-02-10',DATE'20-02-10'+ 60,'zap\'b3acono');      \par
\par
INSERT INTO additional_works (id_job, work_describe, price, day_of_finish) VALUES (1, 'Dodatkowe 10 roslin', 200, DATE'20-01-21'); \par
INSERT INTO additional_works (id_job, work_describe, price, day_of_finish) VALUES (1, '5 Work\f0\'f3w ziemi', 100, DATE'20-01-23');\par
INSERT INTO additional_works (id_job, work_describe, price, day_of_finish) VALUES (2, 'Do\f1\'b3o\'bfone 5 metr\f0\'f3w plastikowych obrze\f1\'bfy', 300, DATE'20-02-02');\par
INSERT INTO additional_works (id_job, work_describe, price, day_of_finish) VALUES (2, '5 m2 kostki brukowej', 2000, DATE'20-02-06');\par
INSERT INTO additional_works (id_job, work_describe, price, day_of_finish) VALUES (2, '3 du\'bfe klony', 1000, DATE'20-02-07');\par
INSERT INTO additional_works (id_job, work_describe, price, day_of_finish) VALUES (2, 'Dodatkowy samoch\f0\'f3d ziemi na podwy\f1\'bfszenie terenu', 1000, DATE'20-02-08');\par
\par
INSERT INTO daily_costs (id_job, amount_of_kilometers, unpredicted_costs, unpredicted_costs_details, daily_cost_date)\par
        VALUES (1, 100, 40, 'tarcze do szlifierki', DATE'20-01-21');\par
INSERT INTO daily_costs (id_job, amount_of_kilometers, unpredicted_costs, unpredicted_costs_details, daily_cost_date)\par
        VALUES (1, 100, 200, 'nowa taczka', DATE'20-01-22');\par
INSERT INTO daily_costs (id_job, amount_of_kilometers, daily_cost_date)\par
        VALUES (1, 100, DATE'20-01-23');\par
INSERT INTO daily_costs (id_job, amount_of_kilometers, unpredicted_costs, unpredicted_costs_details, daily_cost_date)\par
        VALUES (1, 100, 500, 'przebita obota w samochodzie', DATE'20-01-25');\par
INSERT INTO daily_costs (id_job, amount_of_kilometers, daily_cost_date)\par
        VALUES (1, 100, DATE'20-01-26');\par
INSERT INTO daily_costs (id_job, amount_of_kilometers, unpredicted_costs, unpredicted_costs_details, daily_cost_date)\par
        VALUES (2, 38, 100, 'z\'b3amany szpadel', DATE'20-02-01');\par
INSERT INTO daily_costs (id_job, amount_of_kilometers, daily_cost_date)\par
        VALUES (2, 38, DATE'20-02-02');\par
INSERT INTO daily_costs (id_job, amount_of_kilometers, unpredicted_costs, unpredicted_costs_details, daily_cost_date)\par
        VALUES (2, 38, 120, '2 nowe kaski', DATE'20-02-03');\par
INSERT INTO daily_costs (id_job, amount_of_kilometers, unpredicted_costs, unpredicted_costs_details, daily_cost_date)\par
        VALUES (2, 78, 1200, 'zakup zniszczonych ro\'9clin przez jednego z pracownik\f0\'f3w', DATE'20-02-04');\par
INSERT INTO daily_costs (id_job, amount_of_kilometers, daily_cost_date)\par
        VALUES (2, 38, DATE'20-02-05');\par
INSERT INTO daily_costs (id_job, amount_of_kilometers, daily_cost_date)\par
        VALUES (2, 38, DATE'20-02-06');\par
        \par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-21', 8, 1, 1);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-21', 8, 1, 2);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-21', 8, 1, 3);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-21', 8, 1, 4);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-21', 8, 1, 5);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-21', 8, 1, 6);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-21', 8, 1, 7);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-21', 8, 1, 8);\par
\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-22', 8, 1, 1);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-22', 8, 1, 3);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-22', 8, 1, 4);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-22', 8, 1, 5);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-22', 8, 1, 6);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-22', 8, 1, 7);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-22', 8, 1, 8);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-22', 8, 1, 9);\par
\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-23', 8, 1, 1);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-23', 8, 1, 2);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-23', 8, 1, 3);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-23', 8, 1, 6);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-23', 8, 1, 7);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-23', 8, 1, 8);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-23', 8, 1, 9);\par
\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-24', 8, 1, 1);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-24', 8, 1, 2);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-24', 8, 1, 3);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-24', 8, 1, 6);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-24', 8, 1, 7);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-24', 8, 1, 8);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-24', 8, 1, 9);\par
\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-25', 10, 1, 1);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-25', 10, 1, 2);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-25', 10, 1, 3);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-25', 10, 1, 4);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-25', 10, 1, 5);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-25', 10, 1, 6);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-25', 10, 1, 7);\par
\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-27', 8, 2, 1);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-27', 8, 2, 2);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-27', 8, 2, 3);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-27', 8, 2, 6);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-27', 8, 2, 7);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-27', 8, 2, 8);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-27', 8, 2, 9);\par
\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-28', 8, 2, 1);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-28', 8, 2, 2);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-28', 8, 2, 3);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-28', 8, 2, 6);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-28', 8, 2, 7);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-28', 8, 2, 8);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-28', 8, 2, 9);\par
\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-29', 7, 2, 1);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-29', 7, 2, 2);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-29', 7, 2, 3);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-29', 7, 2, 6);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-29', 7, 2, 7);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-29', 7, 2, 8);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-29', 7, 2, 9);\par
\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-30', 8, 2, 1);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-30', 8, 2, 2);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-30', 8, 2, 3);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-30', 8, 2, 6);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-30', 8, 2, 7);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-30', 8, 2, 8);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-01-30', 8, 2, 9);\par
\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-02-01', 10, 2, 1);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-02-01', 10, 2, 2);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-02-01', 10, 2, 3);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-02-01', 10, 2, 6);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-02-01', 10, 2, 7);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-02-01', 10, 2, 8);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-02-01', 10, 2, 9);\par
\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-02-02', 8, 2, 1);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-02-02', 8, 2, 2);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-02-02', 8, 2, 3);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-02-02', 8, 2, 6);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-02-02', 8, 2, 7);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-02-02', 8, 2, 8);\par
INSERT INTO worked_hours (day_of_work, hours_per_day, id_job, id_employee) VALUES (DATE'20-02-02', 8, 2, 9);\par
\par
INSERT INTO materials(id_material, material_name, material_measure) VALUES (materials_id_seq.NEXTVAL, 'sadzonka \f1\'9cwierk - 60 cm', 'szt');\par
INSERT INTO materials(id_material, material_name, material_measure) VALUES (materials_id_seq.NEXTVAL, 'sadzonka \'9cwierk - 100 cm', 'szt');\par
INSERT INTO materials(id_material, material_name, material_measure) VALUES (materials_id_seq.NEXTVAL, 'sadzonka tuja - 40 cm', 'szt');\par
INSERT INTO materials(id_material, material_name, material_measure) VALUES (materials_id_seq.NEXTVAL, 'sadzonka \'9cwierk - 100 cm', 'szt');\par
INSERT INTO materials(id_material, material_name, material_measure) VALUES (materials_id_seq.NEXTVAL, 'agrow\'b3\f0\'f3knina', 'm2');\par
INSERT INTO materials(id_material, material_name, material_measure) VALUES (materials_id_seq.NEXTVAL, 'siatka na krety', 'm2');\par
INSERT INTO materials(id_material, material_name, material_measure) VALUES (materials_id_seq.NEXTVAL, 'ziemia do iglak\'f3w', 'szt');\par
INSERT INTO materials(id_material, material_name, material_measure) VALUES (materials_id_seq.NEXTVAL, 'ziemia uniwersalna', 'szt');\par
INSERT INTO materials(id_material, material_name, material_measure) VALUES (materials_id_seq.NEXTVAL, 'ziemia na podwy\f1\'bfszenie terenu', 't');\par
INSERT INTO materials(id_material, material_name, material_measure) VALUES (materials_id_seq.NEXTVAL, 'ziemia pod trawnik', 't');\par
INSERT INTO materials(id_material, material_name, material_measure) VALUES (materials_id_seq.NEXTVAL, 'trawa uniwersalna 5 kg ', 'szt');\par
INSERT INTO materials(id_material, material_name, material_measure) VALUES (materials_id_seq.NEXTVAL, 'trawa uniwersalna 1 kg', 'szt');\par
\par
INSERT INTO used_materials (id_job, id_material, material_price, material_amount) VALUES (1, 1,5.20, 100);\par
INSERT INTO used_materials (id_job, id_material, material_price, material_amount) VALUES (1, 4,2.20, 50);\par
INSERT INTO used_materials (id_job, id_material, material_price, material_amount) VALUES (1, 2,15, 10);\par
INSERT INTO used_materials (id_job, id_material, material_price, material_amount) VALUES (1, 3,25.20, 1);\par
INSERT INTO used_materials (id_job, id_material, material_price, material_amount) VALUES (1, 11,16.20, 2);\par
INSERT INTO used_materials (id_job, id_material, material_price, material_amount) VALUES (1, 9,500, 1);\par
INSERT INTO used_materials (id_job, id_material, material_price, material_amount) VALUES (2, 1,5.20, 10);\par
INSERT INTO used_materials (id_job, id_material, material_price, material_amount) VALUES (2, 2,10.20, 5);\par
INSERT INTO used_materials (id_job, id_material, material_price, material_amount) VALUES (2, 3,23.90, 5);\par
INSERT INTO used_materials (id_job, id_material, material_price, material_amount) VALUES (2, 5,5, 10);\par
INSERT INTO used_materials (id_job, id_material, material_price, material_amount) VALUES (2, 6,7, 40);\par
\par
CREATE OR REPLACE PACKAGE additional_works_managment_pkg IS\par
PROCEDURE add_work  (in_principal_name principals.first_name%TYPE\par
                     ,in_principal_last_name principals.last_name%TYPE\par
                     ,in_work_describe additional_works.work_describe%TYPE\par
                     ,in_price additional_works.price%TYPE );\par
                     \par
PROCEDURE add_work  (in_work_id jobs.id_job%TYPE\par
                     ,in_work_describe additional_works.work_describe%TYPE\par
                     ,in_price additional_works.price%TYPE );\par
\par
END additional_works_managment_pkg;\par
/\par
CREATE OR REPLACE PACKAGE BODY additional_works_managment_pkg IS\par
\par
PROCEDURE add_work  (in_principal_name principals.first_name%TYPE\par
                     ,in_principal_last_name principals.last_name%TYPE\par
                     ,in_work_describe additional_works.work_describe%TYPE\par
                     ,in_price additional_works.price%TYPE )\par
                     IS\par
v_id_job principals.id_principal%TYPE; \par
BEGIN \par
    v_id_job := general_search_programs.f_find_job_id_by_name_and_last_name_of_principal\par
                (in_principal_name,in_principal_last_name);\par
    IF v_id_job IS NULL THEN RAISE pkg_errors.err_wrong_principals_data; END IF;\par
    \par
    INSERT INTO additional_works (id_job, work_describe, price )  \par
                                VALUES (v_id_job, in_work_describe, in_price );\par
EXCEPTION \par
    WHEN pkg_errors.err_wrong_principals_data THEN DBMS_OUTPUT.PUT_LINE(pkg_errors.mss_err_wrong_principals_data);\par
END add_work;\par
\par
PROCEDURE add_work  (in_work_id jobs.id_job%TYPE\par
                     ,in_work_describe additional_works.work_describe%TYPE\par
                     ,in_price additional_works.price%TYPE )\par
                     IS\par
BEGIN     \par
    INSERT INTO additional_works (id_job, work_describe, price )  \par
                                VALUES (in_work_id, in_work_describe, in_price );\par
EXCEPTION \par
    WHEN pkg_errors.err_wrong_id THEN DBMS_OUTPUT.PUT_LINE(pkg_errors.mss_err_wrong_id);\par
END add_work;\par
\par
\par
END additional_works_managment_pkg;\par
/\par
create or replace PACKAGE employees_managment IS \par
PROCEDURE add_employee(  in_first_name employees.first_name%TYPE\par
                        ,in_last_name employees.last_name%TYPE\par
                        ,in_driving_licence employees.driving_licence%TYPE\par
                        ,in_hire_dare employees.hire_date%TYPE\par
                        ,in_hour_wage employees.hour_wage%TYPE );\par
\par
PROCEDURE fire_worker(in_first_name employees.first_name%TYPE, in_last_name employees.last_name%TYPE); \par
END  employees_managment;\par
\par
/\par
\par
create or replace PACKAGE BODY  employees_managment IS \par
\par
PROCEDURE add_employee(  in_first_name employees.first_name%TYPE\par
                        ,in_last_name employees.last_name%TYPE\par
                        ,in_driving_licence employees.driving_licence%TYPE\par
                        ,in_hire_dare employees.hire_date%TYPE\par
                        ,in_hour_wage employees.hour_wage%TYPE )\par
    IS\par
BEGIN \par
    INSERT INTO employees (first_name, last_name, driving_licence, hire_date, hour_wage) VALUES\par
                        (in_first_name, in_last_name, UPPER(in_driving_licence), in_hire_dare,in_hour_wage);\par
EXCEPTION \par
        WHEN pkg_errors.err_wrong_driving_licence THEN DBMS_OUTPUT.PUT_LINE('Wrong driving licence information, only values "Y" and \par
                                            "N" are accepted');\par
        WHEN pkg_errors.err_wrong_driving_licence_value THEN DBMS_OUTPUT.PUT_LINE('Driver licence value can get only "y" or "n" values');\par
END add_employee;\par
\par
PROCEDURE fire_worker(in_first_name employees.first_name%TYPE, in_last_name employees.last_name%TYPE) \par
    IS\par
BEGIN \par
    DELETE FROM employees WHERE UPPER(last_name) = UPPER(in_last_name) AND UPPER(first_name) = UPPER(in_first_name);\par
    IF SQL%ROWCOUNT = 0 THEN\par
    RAISE pkg_errors.err_no_rows_deleted;\par
    END IF;\par
EXCEPTION \par
    WHEN pkg_errors.err_no_rows_deleted THEN DBMS_OUTPUT.PUT_LINE('Wrong data, there'' no worker with those name or last name');\par
END fire_worker;\par
\par
END employees_managment;\par
/\par
create or replace PACKAGE pkg_errors IS\par
--employees managment exeptions\par
err_wrong_driving_licence EXCEPTION;\par
PRAGMA EXCEPTION_INIT (err_wrong_driving_licence, -12899);\par
err_wrong_driving_licence_value EXCEPTION;\par
PRAGMA EXCEPTION_INIT (err_wrong_driving_licence_value, -02290 );\par
err_no_rows_deleted EXCEPTION;\par
PRAGMA EXCEPTION_INIT (err_no_rows_deleted, -20001);\par
\par
--principals managment_exeptions\par
err_wrong_principals_data EXCEPTION;\par
PRAGMA EXCEPTION_INIT (err_wrong_principals_data, -20100);\par
mss_err_wrong_principals_data VARCHAR2(100) := 'There''s no principal whose suit to your data'; \par
\par
--additional jobs exceptions\par
err_wrong_id EXCEPTION;\par
PRAGMA EXCEPTION_INIT(err_wrong_id,-02291);\par
mss_err_wrong_id VARCHAR2(200) := 'Id which You''ve introduced is wrong, correct it or insert additional job by name and\par
                                and last name of principal';\par
-- invoices exceptions\par
mss_err_wrong_job_id VARCHAR2(200) := 'You introduced wrong id_job, please correct it';\par
--jobs_done_statistics exeptions\par
\par
\par
END;\par
/\par
CREATE OR REPLACE PACKAGE pkg_errors_managment IS\par
\par
PROCEDURE add_error(in_error_number VARCHAR2, in_error_details VARCHAR2, error_details VARCHAR2); \par
\par
END pkg_errors_managment;\par
/\par
CREATE OR REPLACE PACKAGE BODY pkg_errors_managment IS \par
    \par
    PROCEDURE add_error(in_error_number VARCHAR2, in_error_details VARCHAR2, error_details VARCHAR2) \par
        IS\par
    v_place_where_error_occur VARCHAR2(200);\par
    BEGIN \par
        v_place_where_error_occur := SUBSTR(error_details,INSTR(error_details,'name')+ 5,LENGTH(error_details));\par
        INSERT INTO errors_details (error_number, error_message, user_name, error_details)\par
        VALUES (in_error_number, in_error_details, user, v_place_where_error_occur);\par
    END add_error;\par
    \par
    \par
END pkg_errors_managment;\par
/\par
DROP PACKAGE GENEREAL_SEARCH_PROGRAMS;\par
/\par
CREATE OR REPLACE PACKAGE general_search_programs IS\par
PROCEDURE find_similar_names_and_last_names_by_table(first_name VARCHAR2, last_name VARCHAR2, table_name VARCHAR2); \par
FUNCTION f_find_job_id_by_name_and_last_name_of_principal   \par
                                                (in_principal_name principals.first_name%TYPE,\par
                                                in_principal_last_name principals.last_name%TYPE\par
                                                ) RETURN NUMBER ;\par
FUNCTION check_if_id_job_is_right (in_id_job jobs.id_job%TYPE) RETURN jobs.id_job%TYPE;\par
END general_search_programs;\par
/\par
CREATE OR REPLACE PACKAGE BODY general_search_programs IS \par
\par
FUNCTION check_if_id_job_is_right (in_id_job jobs.id_job%TYPE) RETURN jobs.id_job%TYPE\par
    IS\par
    v_check NUMBER := 0; \par
BEGIN\par
    SELECT COUNT(*) INTO v_check FROM jobs WHERE id_job = in_id_job;\par
    IF (v_check <= 0) THEN RAISE NO_DATA_FOUND; END IF;\par
    RETURN in_id_job;\par
END check_if_id_job_is_right;\par
\par
PROCEDURE find_similar_names_and_last_names_by_table(first_name VARCHAR2, last_name VARCHAR2, table_name VARCHAR2) \par
    IS  \par
    TYPE first_and_last IS RECORD (first_name VARCHAR2(100), last_name VARCHAR2(100) ) ;\par
    TYPE array_names IS TABLE OF first_and_last;\par
    v_array_names array_names;\par
    v_condition VARCHAR2(1000):=' WHERE LOWER(first_name) LIKE LOWER(SUBSTR('''||first_name||''',1,1)) || ''%''\par
                                OR\par
                                LOWER(last_name) LIKE LOWER(SUBSTR('''||last_name||''',1,1)) || ''%''';\par
    BEGIN \par
        EXECUTE IMMEDIATE  'SELECT first_name, last_name FROM '\par
        || table_name ||v_condition BULK COLLECT INTO v_array_names;\par
        IF SQL%ROWCOUNT = 0 THEN RAISE NO_DATA_FOUND; END IF;\par
        DBMS_OUTPUT.PUT_LINE('No found person with these data, maybe were you looking for one of those? ');\par
        DBMS_OUTPUT.PUT_LINE('Persons with similar data: ');\par
        FOR i IN v_array_names.FIRST..v_array_names.LAST \par
            LOOP\par
            DBMS_OUTPUT.PUT_LINE('Name: '|| v_array_names(i).first_name || ' Last Name: ' || v_array_names(i).last_name);\par
        END LOOP;\par
EXCEPTION \par
    WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('Nobody match to your data');\par
END find_similar_names_and_last_names_by_table;\par
\par
FUNCTION f_find_job_id_by_name_and_last_name_of_principal   \par
                                                (in_principal_name principals.first_name%TYPE,\par
                                                in_principal_last_name principals.last_name%TYPE\par
                                                ) RETURN NUMBER  \par
    IS \par
    v_id NUMBER := NULL;\par
    v_job_id NUMBER := NULL;\par
    BEGIN\par
    SELECT id_principal INTO v_id FROM principals WHERE LOWER(first_name) = \par
                        LOWER(in_principal_name) AND LOWER(last_name) = LOWER(in_principal_last_name);\par
    SELECT id_job INTO v_job_id FROM jobs WHERE id_principal = v_id;\par
    RETURN v_job_id;\par
EXCEPTION  \par
    WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('There''s no principal whose match to your data' );\par
                    general_search_programs.find_similar_names_and_last_names_by_table\par
                    (in_principal_name,in_principal_last_name,'principals');\par
                    RETURN NULL;\par
END f_find_job_id_by_name_and_last_name_of_principal; \par
\par
\par
\par
END general_search_programs;\par
/\par
create or replace PACKAGE invoices_pkg IS\par
\par
    PROCEDURE generate_invoice (in_id_job jobs.id_job%TYPE) ;\par
\par
END invoices_pkg;\par
\par
/\par
create or replace PACKAGE BODY invoices_pkg IS\par
\par
    FUNCTION number_already_exists(in_number VARCHAR2) RETURN VARCHAR2 \par
        IS \par
        v_first_invoice_part VARCHAR2(10);\par
        v_second_invoice_part VARCHAR2(15);\par
        v_final_number VARCHAR2(30);\par
        v_temporary_counter VARCHAR2(30);\par
        v_temporary_invoice_number VARCHAR2(30);\par
        BEGIN\par
          v_first_invoice_part := SUBSTR(in_number,1,INSTR(in_number, '-'));\par
          v_temporary_invoice_number := LTRIM(in_number,v_first_invoice_part);\par
          v_second_invoice_part := SUBSTR(v_temporary_invoice_number,INSTR(v_temporary_invoice_number,'-'),LENGTH(v_temporary_invoice_number));\par
          v_temporary_invoice_number := SUBSTR(v_temporary_invoice_number,1,INSTR(v_temporary_invoice_number,'-') -1);\par
          v_temporary_counter := v_temporary_invoice_number + 1;\par
\par
          v_final_number := v_first_invoice_part||v_temporary_counter||v_second_invoice_part;\par
\par
        RETURN v_final_number;\par
        END number_already_exists;\par
\par
    FUNCTION generate_invoice_number(in_id_job NUMBER) RETURN VARCHAR2\par
    IS \par
         c_invoice CONSTANT  VARCHAR2(3)  := 'INV';\par
         v_date VARCHAR2(20) := TO_CHAR(SYSDATE,'YYYY/MM/DD');  \par
         v_invoice_number NUMBER := 1;\par
         v_id_principal NUMBER;\par
         v_final_invoice_number VARCHAR2(20);\par
         v_check NUMBER := 1;\par
        BEGIN            \par
            SELECT id_principal INTO v_id_principal FROM jobs WHERE id_job = in_id_job;\par
            v_final_invoice_number := c_invoice|| '-' ||v_invoice_number || '-' ||v_id_principal  || '-' || v_date;    \par
            SELECT count(*) INTO v_check FROM invoices WHERE invoice_number = v_final_invoice_number;\par
\par
            WHILE (v_check <> 0) \par
                LOOP\par
                    v_final_invoice_number := number_already_exists(v_final_invoice_number);\par
                    SELECT count(*) INTO v_check FROM invoices WHERE invoice_number = v_final_invoice_number;\par
            END LOOP;\par
            \par
        RETURN v_final_invoice_number;\par
END generate_invoice_number;\par
\par
PROCEDURE generate_invoice (in_id_job jobs.id_job%TYPE) \par
    IS\par
    v_status VARCHAR2(30) := 'Oczekiwanie na zap\'b3at\'ea';\par
    v_agreed_amount jobs.agreed_amount%TYPE;\par
    v_invoice_number VARCHAR2(30);\par
    BEGIN    \par
    v_invoice_number := generate_invoice_number(in_id_job);\par
    INSERT INTO invoices (invoice_number, id_job, id_principal, agreed_amount, additional_works_amount, status)\par
        VALUES (v_invoice_number , in_id_job, (SELECT id_principal FROM jobs WHERE id_job = in_id_job)\par
              ,( SELECT agreed_amount FROM jobs WHERE id_job = in_id_job)\par
              ,(SELECT SUM(price) FROM additional_works WHERE id_job = in_id_job), v_status);\par
    EXCEPTION \par
        WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE(pkg_errors.mss_err_wrong_job_id);\par
    END generate_invoice;\par
\par
\par
END invoices_pkg;\par
/\par
CREATE OR REPLACE PACKAGE pkg_jobs_done_statistics IS\par
\par
PROCEDURE add_data_to_statistic(in_id_job jobs.id_job%TYPE);\par
 \par
END pkg_jobs_done_statistics;\par
/\par
CREATE OR REPLACE PACKAGE BODY pkg_jobs_done_statistics IS\par
            \par
    FUNCTION get_first_name(in_id_job jobs.id_job%TYPE) RETURN VARCHAR2\par
        IS\par
        v_principal_first_name principals.first_name%TYPE;\par
    BEGIN\par
        SELECT first_name INTO v_principal_first_name FROM principals p \par
        INNER JOIN jobs j ON p.id_principal = j.id_principal WHERE j.id_job = in_id_job;\par
        RETURN v_principal_first_name;\par
    END get_first_name;\par
    \par
    FUNCTION get_last_name(in_id_job jobs.id_job%TYPE) RETURN VARCHAR2\par
        IS\par
        v_principal_last_name principals.last_name%TYPE;\par
    BEGIN\par
         SELECT last_name INTO v_principal_last_name FROM principals p \par
        INNER JOIN jobs j ON p.id_principal = j.id_principal WHERE j.id_job = in_id_job;\par
        RETURN v_principal_last_name;\par
    END get_last_name;\par
    \par
    FUNCTION get_street(in_id_job jobs.id_job%TYPE) RETURN VARCHAR2\par
        IS\par
        v_street jobs.street%TYPE;\par
    BEGIN \par
        SELECT street INTO v_street FROM jobs WHERE id_job = in_id_job;\par
        RETURN v_street;\par
    END get_street;\par
\par
    FUNCTION get_all_worked_hours(in_id_job jobs.id_job%TYPE) RETURN NUMBER \par
        IS\par
        v_amount_of_hours NUMBER;\par
    BEGIN\par
        SELECT SUM(hours_per_day) INTO v_amount_of_hours FROM worked_hours WHERE id_job = in_id_job;\par
        RETURN v_amount_of_hours;\par
    END get_all_worked_hours;\par
    \par
    FUNCTION get_cost_of_worked_hours(in_id_job jobs.id_job%TYPE) RETURN NUMBER \par
        IS\par
        v_cost_of_hours NUMBER;\par
    BEGIN\par
        SELECT SUM(hours_per_day * hour_wage)INTO v_cost_of_hours FROM worked_hours w JOIN employees  e \par
        ON w.id_employee = e.id_employee\par
        WHERE id_job = in_id_job;\par
        RETURN v_cost_of_hours;\par
    END get_cost_of_worked_hours;\par
    \par
    FUNCTION get_material_cost(in_id_job jobs.id_job%TYPE) RETURN NUMBER \par
        IS\par
        v_material_cost NUMBER;\par
    BEGIN\par
        SELECT SUM(material_price * material_amount) INTO v_material_cost FROM used_materials WHERE id_job = in_id_job;\par
        RETURN v_material_cost;\par
    END get_material_cost;\par
    \par
    FUNCTION get_number_of_additional_works(in_id_job jobs.id_job%TYPE) RETURN NUMBER \par
        IS\par
        v_additional_works NUMBER;\par
    BEGIN\par
        SELECT COUNT(*)INTO v_additional_works FROM additional_works WHERE id_job = in_id_job;\par
        RETURN v_additional_works;\par
    END get_number_of_additional_works;\par
\par
      FUNCTION get_cost_of_additional_works(in_id_job jobs.id_job%TYPE) RETURN NUMBER \par
        IS\par
        v_cost_of_additional_works NUMBER;\par
    BEGIN\par
        SELECT SUM(price) INTO v_cost_of_additional_works FROM additional_works WHERE id_job = in_id_job;        \par
        RETURN v_cost_of_additional_works;\par
    END get_cost_of_additional_works;\par
    \par
     FUNCTION get_amount_of_kilometers(in_id_job jobs.id_job%TYPE) RETURN NUMBER \par
        IS\par
        v_amount_of_kilometers NUMBER;\par
    BEGIN\par
        SELECT SUM(amount_of_kilometers) INTO v_amount_of_kilometers FROM daily_costs WHERE id_job = in_id_job;        \par
        RETURN v_amount_of_kilometers;\par
    END get_amount_of_kilometers;\par
    \par
    FUNCTION get_agreed_amount(in_id_job jobs.id_job%TYPE) RETURN NUMBER \par
        IS\par
        v_agreed_amount NUMBER;\par
    BEGIN\par
        SELECT agreed_amount INTO v_agreed_amount FROM jobs WHERE id_job = in_id_job;        \par
        RETURN v_agreed_amount;\par
    END get_agreed_amount;\par
\par
     FUNCTION get_amount_of_unpredicted_costs(in_id_job jobs.id_job%TYPE) RETURN NUMBER \par
        IS\par
        v_amount_of_unpredicted_costs NUMBER;\par
    BEGIN\par
        SELECT SUM(unpredicted_costs) INTO v_amount_of_unpredicted_costs FROM daily_costs where id_job = in_id_job;\par
        RETURN v_amount_of_unpredicted_costs;\par
    END get_amount_of_unpredicted_costs; \par
    \par
     FUNCTION get_predicted_time(in_id_job jobs.id_job%TYPE) RETURN NUMBER \par
        IS\par
        v_predicted_time NUMBER;\par
    BEGIN\par
        SELECT predicted_ending - predicted_beginning INTO v_predicted_time FROM jobs where id_job = in_id_job;\par
        RETURN v_predicted_time;\par
    END get_predicted_time;\par
    \par
     FUNCTION get_final_time(in_id_job jobs.id_job%TYPE) RETURN NUMBER \par
        IS\par
        v_final_time NUMBER;\par
    BEGIN\par
        SELECT job_end - job_begin INTO v_final_time FROM jobs where id_job = in_id_job;\par
        RETURN v_final_time;\par
    END get_final_time;\par
\par
PROCEDURE add_data_to_statistic_table_after_check(in_id_job jobs.id_job%TYPE)\par
    IS    \par
    v_check NUMBER := 0;\par
    v_first_name VARCHAR2(30) := get_first_name(in_id_job); \par
    v_last_name VARCHAR2(40) := get_last_name(in_id_job);\par
    v_street VARCHAR2(30) := get_street(in_id_job);\par
    v_all_worked_hours NUMBER := get_all_worked_hours(in_id_job);\par
    v_cost_of_worked_hours NUMBER :=  get_cost_of_worked_hours(in_id_job);\par
    v_material_cost NUMBER := get_material_cost(in_id_job);\par
    v_number_of_additional_works NUMBER := get_number_of_additional_works(in_id_job);\par
    v_cost_of_additional_works NUMBER := get_cost_of_additional_works(in_id_job);\par
    v_driven_kilometers NUMBER := get_amount_of_kilometers(in_id_job);\par
    v_agreed_amount NUMBER := get_agreed_amount(in_id_job);\par
    v_amount_of_unpredicted_costs NUMBER := get_amount_of_unpredicted_costs(in_id_job);\par
    v_predicted_time NUMBER := get_predicted_time(in_id_job);\par
    v_final_time NUMBER := get_final_time(in_id_job) ;\par
BEGIN\par
    INSERT INTO jobs_done_statistics \par
            (principal_first_name, principal_last_name, street, worked_hours, cost_of_worked_hours, material_cost,\par
            number_of_additional_works, cost_of_additional_works, driven_kilometers, agreed_amount, amount_of_unpredicted_costs,\par
            predicted_time_in_days, final_time_in_days)\par
    VALUES (v_first_name, v_last_name, v_street,v_all_worked_hours,\par
            v_cost_of_worked_hours , v_material_cost,v_number_of_additional_works,\par
            v_cost_of_additional_works,v_driven_kilometers ,v_agreed_amount ,\par
            v_amount_of_unpredicted_costs,v_predicted_time ,v_final_time);\par
END add_data_to_statistic_table_after_check;\par
\par
PROCEDURE add_data_to_statistic(in_id_job jobs.id_job%TYPE)\par
    IS\par
    v_id_job NUMBER;\par
BEGIN\par
    v_id_job := general_search_programs.check_if_id_job_is_right(in_id_job);\par
    add_data_to_statistic_table_after_check(v_id_job);\par
    EXCEPTION \par
        WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('Id_job that you inserted is wrong, please correct it.');\par
END add_data_to_statistic;\par
\par
END pkg_jobs_done_statistics;\par
/\par
create or replace PACKAGE jobs_managment_pkg IS\par
PROCEDURE p_add_job   (in_principal_name principals.first_name%TYPE\par
                    ,in_principal_last_name principals.last_name%TYPE\par
                    ,in_agreed_amount jobs.agreed_amount%TYPE\par
                    ,in_predicted_beginning jobs.predicted_beginning%TYPE\par
                    ,in_predicted_ending jobs.predicted_ending%TYPE\par
                    ,in_job_description jobs.job_description%TYPE);\par
\par
PROCEDURE p_begin_job  (in_principal_name principals.first_name%TYPE\par
                        ,in_principal_last_name principals.last_name%TYPE\par
                        ,in_begin DATE);\par
PROCEDURE p_end_job (in_principal_name principals.first_name%TYPE\par
                     ,in_principal_last_name principals.last_name%TYPE\par
                     ,in_end DATE) ;\par
PROCEDURE p_set_job_as_done(in_principal_first_name principals.first_name%TYPE\par
                          , in_principal_last_name principals.last_name%TYPE, in_street jobs.street%TYPE);\par
--PROCEDURE delete_job(in_id_job jobs.id_job%TYPE);\par
\par
                     \par
\par
END jobs_managment_pkg;\par
/\par
create or replace PACKAGE BODY jobs_managment_pkg IS\par
/*\par
PROCEDURE delete_job(in_id_job jobs.id_job%TYPE) \par
    IS\par
BEGIN\par
    DELETE FROM jobs WHERE id_job = in_id_job;\par
END; */\par
\par
PROCEDURE p_set_job_as_done(in_principal_first_name principals.first_name%TYPE\par
                          , in_principal_last_name principals.last_name%TYPE, in_street jobs.street%TYPE)\par
    IS \par
    v_status CONSTANT VARCHAR2(15) := 'Zako\'f1czone';\par
    v_table_name CONSTANT VARCHAR2(10) := 'principals';\par
BEGIN \par
        UPDATE JOBS \par
        SET status = v_status\par
        WHERE id_job = \par
        (SELECT id_job FROM jobs j INNER JOIN principals p ON j.id_principal = p.id_principal \par
        WHERE p.first_name = in_principal_first_name \par
        AND p.last_name = in_principal_last_name \par
        AND j.street = in_street);\par
       \par
       IF (SQL%ROWCOUNT = 0 ) THEN general_search_programs.find_similar_names_and_last_names_by_table( in_principal_first_name,\par
                                                           in_principal_last_name,v_table_name);\par
        ELSE DBMS_OUTPUT.PUT_LINE('You succesfully updated status');\par
        END IF;\par
       \par
END p_set_job_as_done;\par
\par
PROCEDURE p_add_job   (in_principal_name principals.first_name%TYPE\par
                    ,in_principal_last_name principals.last_name%TYPE\par
                    ,in_agreed_amount jobs.agreed_amount%TYPE\par
                    ,in_predicted_beginning jobs.predicted_beginning%TYPE\par
                    ,in_predicted_ending jobs.predicted_ending%TYPE\par
                    ,in_job_description jobs.job_description%TYPE)\par
    IS \par
    v_principal_id NUMBER;\par
BEGIN  \par
    SELECT id_principal INTO v_principal_id  FROM principals WHERE first_name = in_principal_name AND last_name = in_principal_last_name;\par
    \par
    IF in_principal_last_name IS NULL OR \par
    in_principal_name IS NULL \par
    THEN RAISE pkg_errors.err_wrong_principals_data; END IF;\par
    \par
    INSERT INTO jobs (id_principal, agreed_amount, predicted_beginning, predicted_ending, job_description)\par
            VALUES ((SELECT id_principal FROM principals WHERE first_name = in_principal_name AND last_name = in_principal_last_name),\par
                    in_agreed_amount, in_predicted_beginning, in_predicted_ending, in_job_description);\par
EXCEPTION \par
    WHEN NO_DATA_FOUND OR pkg_errors.err_wrong_principals_data \par
        THEN DBMS_OUTPUT.PUT_LINE (pkg_errors.mss_err_wrong_principals_data);\par
        general_search_programs.find_similar_names_and_last_names_by_table(in_principal_name, in_principal_last_name, 'principals');\par
END p_add_job; \par
\par
PROCEDURE p_begin_job  (in_principal_name principals.first_name%TYPE\par
                     ,in_principal_last_name principals.last_name%TYPE\par
                     ,in_begin DATE) \par
IS \par
v_id_job principals.id_principal%TYPE; \par
BEGIN \par
    v_id_job := general_search_programs.f_find_job_id_by_name_and_last_name_of_principal\par
                (in_principal_name,in_principal_last_name);\par
    IF v_id_job IS NULL THEN RAISE pkg_errors.err_wrong_principals_data; END IF;\par
    UPDATE jobs  SET job_begin = in_begin WHERE id_job = v_id_job;\par
EXCEPTION \par
    WHEN pkg_errors.err_wrong_principals_data THEN DBMS_OUTPUT.PUT_LINE(pkg_errors.mss_err_wrong_principals_data);\par
END p_begin_job;\par
\par
PROCEDURE p_end_job (in_principal_name principals.first_name%TYPE\par
                     ,in_principal_last_name principals.last_name%TYPE\par
                     ,in_end DATE) \par
IS \par
v_id_job principals.id_principal%TYPE; \par
BEGIN\par
     v_id_job := general_search_programs.f_find_job_id_by_name_and_last_name_of_principal\par
                (in_principal_name,in_principal_last_name);\par
    IF v_id_job IS NULL THEN RAISE pkg_errors.err_wrong_principals_data; END IF;\par
    UPDATE jobs SET job_end = in_end WHERE id_job = v_id_job;\par
EXCEPTION \par
    WHEN pkg_errors.err_wrong_principals_data THEN DBMS_OUTPUT.PUT_LINE(pkg_errors.mss_err_wrong_principals_data);\par
END p_end_job;\par
\par
\par
\par
END jobs_managment_pkg;\par
/\par
create or replace PACKAGE principal_managment  IS\par
PROCEDURE add_principal (in_first_name principals.first_name%TYPE\par
                        ,in_last_name principals.last_name%TYPE\par
                        ,in_city principals.city%TYPE\par
                        ,in_street principals.street%TYPE\par
                        ,in_home_number principals.home_number%TYPE\par
                        ,in_phone_number  principals.phone_number%TYPE );\par
PROCEDURE drop_principal(in_first_name principals.first_name%TYPE, in_last_name principals.last_name%TYPE);\par
\par
END principal_managment;\par
/\par
\par
create or replace PACKAGE BODY jobs_managment_pkg IS\par
\par
\par
PROCEDURE p_add_job   (in_principal_name principals.first_name%TYPE,\par
                    in_principal_last_name principals.last_name%TYPE,\par
                    in_agreed_amount jobs.agreed_amount%TYPE,\par
                    in_predicted_beginning jobs.predicted_beginning%TYPE,\par
                    in_predicted_ending jobs.predicted_ending%TYPE )\par
IS \par
v_principal_id NUMBER;\par
BEGIN  \par
    SELECT id_principal INTO v_principal_id  FROM principals WHERE first_name = in_principal_name AND last_name = in_principal_last_name;\par
    \par
    IF in_principal_last_name IS NULL OR \par
    in_principal_name IS NULL \par
    THEN RAISE pkg_errors.err_wrong_principals_data; END IF;\par
    \par
    INSERT INTO jobs (id_principal, agreed_amount, predicted_beginning, predicted_ending)\par
            VALUES ((SELECT id_principal FROM principals WHERE first_name = in_principal_name AND last_name = in_principal_last_name),\par
                    in_agreed_amount, in_predicted_beginning, in_predicted_ending);\par
EXCEPTION \par
    WHEN NO_DATA_FOUND OR pkg_errors.err_wrong_principals_data \par
        THEN DBMS_OUTPUT.PUT_LINE (pkg_errors.mss_err_wrong_principals_data);\par
        general_search_programs.find_similar_names_and_last_names_by_table(in_principal_name, in_principal_last_name, 'principals');\par
END p_add_job; \par
\par
PROCEDURE p_begin_job  (in_principal_name principals.first_name%TYPE\par
                     ,in_principal_last_name principals.last_name%TYPE\par
                     ,in_begin DATE) \par
IS \par
v_id_job principals.id_principal%TYPE; \par
BEGIN \par
    v_id_job := general_search_programs.f_find_job_id_by_name_and_last_name_of_principal\par
                (in_principal_name,in_principal_last_name);\par
    IF v_id_job IS NULL THEN RAISE pkg_errors.err_wrong_principals_data; END IF;\par
    UPDATE jobs  SET job_begin = in_begin WHERE id_job = v_id_job;\par
EXCEPTION \par
    WHEN pkg_errors.err_wrong_principals_data THEN DBMS_OUTPUT.PUT_LINE(pkg_errors.mss_err_wrong_principals_data);\par
END p_begin_job;\par
\par
PROCEDURE p_end_job (in_principal_name principals.first_name%TYPE\par
                     ,in_principal_last_name principals.last_name%TYPE\par
                     ,in_end DATE) \par
IS \par
v_id_job principals.id_principal%TYPE; \par
BEGIN\par
     v_id_job := general_search_programs.f_find_job_id_by_name_and_last_name_of_principal\par
                (in_principal_name,in_principal_last_name);\par
    IF v_id_job IS NULL THEN RAISE pkg_errors.err_wrong_principals_data; END IF;\par
    UPDATE jobs SET job_end = in_end WHERE id_job = v_id_job;\par
EXCEPTION \par
    WHEN pkg_errors.err_wrong_principals_data THEN DBMS_OUTPUT.PUT_LINE(pkg_errors.mss_err_wrong_principals_data);\par
END p_end_job;\par
\par
\par
\par
END jobs_managment_pkg;\par
/\par
create or replace PACKAGE worked_hours_pkg IS\par
PROCEDURE all_at_one_job( in_day_of_work DATE\par
                         ,in_hours_per_day worked_hours.hours_per_day%TYPE\par
                         ,in_id_job jobs.id_job%TYPE);\par
\par
END worked_hours_pkg;\par
/\par
create or replace PACKAGE BODY worked_hours_pkg IS\par
\par
TYPE ntt_all_employees IS TABLE OF employees.id_employee%TYPE;\par
\par
FUNCTION get_all_employees_id RETURN ntt_all_employees IS\par
    v_all_employees ntt_all_employees;\par
    CURSOR all_id IS SELECT id_employee FROM employees;\par
    BEGIN \par
        OPEN all_id;\par
        FETCH all_id BULK COLLECT INTO v_all_employees;\par
        CLOSE all_id;\par
    RETURN v_all_employees;\par
END get_all_employees_id;\par
 \par
 \par
PROCEDURE all_at_one_job( in_day_of_work DATE\par
                         ,in_hours_per_day worked_hours.hours_per_day%TYPE\par
                         ,in_id_job jobs.id_job%TYPE)\par
    IS \par
    v_all_employees ntt_all_employees;\par
    BEGIN \par
     v_all_employees:= get_all_employees_id();\par
    FOR i in v_all_employees.FIRST..v_all_employees.LAST\par
        LOOP \par
           INSERT INTO worked_hours(day_of_work, hours_per_day, id_job, id_employee)\par
                            VALUES (in_day_of_work, in_hours_per_day, in_id_job, v_all_employees(i) );\par
        END LOOP;\par
\par
END all_at_one_job;\par
\par
END;\par
/\f2      \par
     \par
\par
}
 